# Copyright (C) 2010, Guy Barrand. All rights reserved.
# See the file bush.license for terms.

if [ "${build_distrib}" = "yes" ] ; then

if [ "${build_app_distrib_dir}" = "" ] ; then build_app_distrib_dir="${app}"; fi
  
/bin/rm -R -f ${build_path}/distrib/${build_app_distrib_dir}
  
target=
if [ ${build_offscreen} = "yes" ] ; then
  target=offscreen
elif [ ${build_webgl} = "yes" ] ; then
  target=WebGL
elif [ ${build_tntnet} = "yes" ] ; then
  target=tntnet
elif [ ${build_wx} = "yes" ] ; then
  target=wx

elif [ ${build_visual} = "yes" ] ; then
  target=Windows
elif [ ${build_x11} = "yes" ] ; then
  target=X11

elif [ ${build_sdk_android} = "yes" ] ; then

  if [ ${build_verbose} = yes ] ; then
    echo "bush/app_distrib : android java part ..."
  fi

  ${bush_home}/check_app ant 'bush/app_distrib : ant program not found. Arrange to have it in your PATH.'
  use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi

  save_dir=`pwd`
  cd ../Android
  /bin/cp ./ant.properties tmp_props
  echo "out.dir=../mgr/${build_dir}" >> ant.properties
  
  if [ ${build_verbose} = yes ] ; then
    echo 'bush/app_distrib : cat ant.properties :'
    cat ant.properties    
  fi

  /bin/rm -R -f ./libs
  /bin/mkdir -p ./libs/armeabi
  /bin/cp ${save_dir}/${build_path}/lib${app}.so ./libs/armeabi/

  if [ ${build_verbose} = yes ] ; then
    echo 'bush/app_distrib : ant -silent release :'
    ant release           # it will ask twice the ${app}.jks pwd.
    echo 'bush/app_distrib : ant done.'
  else
    ant -silent release   # it will ask twice the ${app}.jks pwd.
  fi

  /bin/mv tmp_props ./ant.properties
  cd ${save_dir}

  #build_pwd=android

  # due to a bug in SDK 22 and Android 2.2 we sign again :
  #app_apk="${build_path}/${app}-release-unaligned.apk" 
  #/bin/mv ${build_path}/${app}-release-unsigned.apk ${app_apk}
  #jarsigner -keystore ../Android/${app}.jks -storepass ${build_pwd} -keypass ${build_pwd} ${app_apk} ${app}
  #${sdk_home}/tools/zipalign -f 4 ${app_apk} ${build_path}/${app}-release.apk
  #/bin/rm -f ${app_apk}

  # to upload on a device :
  # adb -d install -r ${app}-release.apk

elif [ ${build_cocoa} = "yes" -o ${build_cocoa_gnu} = "yes" ] ; then

  if [ ${build_verbose} = yes ] ; then
    echo "bush/app_distrib : for cocoa/coca_gnu ..."
  fi

  if [ ! -f "${file_exe}" ] ; then
    echo "bush/app_distrib : exe not built."
  else

    head_app=${build_path}/distrib/${build_app_distrib_dir}/${version}/${app}.app
    head=${head_app}/Contents
    /bin/mkdir -p ${head}/MacOS
    /bin/cp ${file_exe} ${head}/MacOS/${app}
    if [ -d ../comres ] ; then
      /bin/cp -R -f ../comres ${head}/Resources
    fi
  
    #builtin-infoPlistUtility ioda-Info.plist -genpkginfo ${head}/Resources/PkgInfo -expandbuildsettings -platform macosx -o $  {head}/Info.plist
  
    /bin/cp ${bush_home}/app_PkgInfo ${head}/PkgInfo
  
    if [ -f ../Cocoa/${app}.icns ] ; then
      /bin/mkdir -p ${head}/Resources
      /bin/cp ../Cocoa/${app}.icns ${head}/Resources/.
    fi
  
    if [ -f ../Cocoa/${app}-Info.plist ] ; then
      /bin/cp ../Cocoa/${app}-Info.plist tmp_0
  
      from='${EXECUTABLE_NAME}'
      to="${app}"
      sed -e "s|${from}|${to}|g" tmp_0 > tmp_1
  
      from='${PRODUCT_NAME}'
      to="${app}"
      sed -e "s|${from}|${to}|g" tmp_1 > tmp_2
  
      from='${PRODUCT_NAME:rfc1034identifier}'
      to="${app}"
      sed -e "s|${from}|${to}|g" tmp_2 > tmp_3
  
      from='com.yourcompany'
      to="${app_bundle_id}"
      sed -e "s|${from}|${to}|g" tmp_3 > tmp_4
  
      from='${MACOSX_DEPLOYMENT_TARGET}'
      to="${macosx_target}"
      sed -e "s|${from}|${to}|g" tmp_4 > tmp_5
  
      /bin/mv tmp_5 ${head}/Info.plist
  
      /bin/rm -f tmp_0 tmp_1 tmp_2 tmp_3 tmp_4
  
    else 
      echo "bush/app_distrib : ../Cocoa/${app}-Info.plist not found."
    fi
  
    #///////////////////////////////////////////////////
    #/// interface builder : ///////////////////////////
    #///////////////////////////////////////////////////
    /bin/mkdir -p ${head}/Resources/English.lproj
    ibflags="--errors --warnings --notices"
    ibflags="${ibflags} --output-format human-readable-text"
   #ibtool ${ibflags} --compile ${head}/Resources/English.lproj/MainMenu.nib ../Cocoa/English.lproj/MainMenu.xib
  
    save_dir=`pwd`
  
    if [ `echo ${head} | sed -e s:${save_dir}::g` = ${head} ] ; then
      abs_head="${save_dir}/${head}"
    else
      abs_head="${head}"
    fi

    ibtool ${ibflags} --compile ${abs_head}/Resources/English.lproj/MainMenu.nib ${save_dir}/../Cocoa/English.lproj/MainMenu.xib
    # option not available with ibtool 3.x :
    #--sdk ${macosx_sdk}
      
    # must be after having done ibtool :
    #builtin-copyStrings --validate --inputencoding utf-8 --outputencoding UTF-16 --outdir ${head}/Resources/English.lproj --   Enish.lproj/InfoPlist.strings
    plutil -convert binary1 -o ${head}/Resources/English.lproj/InfoPlist.strings ../Cocoa/English.lproj/InfoPlist.strings
  
    #///////////////////////////////////////////////////
    #/// zip : /////////////////////////////////////////
    #///////////////////////////////////////////////////
    chmod -R a+r ${head_app}
    find ${head_app} -name '*' -type d -exec chmod a+x {} \;
  
    platform=cocoa-clang
    if [ ${build_cocoa_gnu} = "yes" ] ; then platform=cocoa-gnu;fi
  
    save_dir=`pwd`
  
    ${bush_home}/check_app zip 'zip not found, we use tar.'
    use_status=$?;
    if [ ${use_status} != 0 ] ; then
      cd ${build_path}/distrib
      tar cf ${build_app_distrib_dir}-${version}-${platform}.tar ./${build_app_distrib_dir}
      cd ${save_dir}
    else
      cd ${build_path}/distrib
      zip -qr ${build_app_distrib_dir}-${version}-${platform}.zip ./${build_app_distrib_dir}
      cd ${save_dir}
    fi
  
  fi #file_exe

elif [ ${build_ios} = "yes" -o ${build_ios_gnu} = "yes" ] ; then
  #echo "bush/app_distrib : ios : debug : 1"

  if [ ${build_verbose} = yes ] ; then
    echo "bush/app_distrib : for ios ..."
  fi

  if [ ! -f "${file_exe}" ] ; then
    echo "bush/app_distrib : exe not built."
  else
  
    head=${build_path}/distrib/${build_app_distrib_dir}/${version}/${app}.app
    /bin/mkdir -p ${head}
    #/bin/cp ${file_exe} ${head}/.
    # create and put in distrib a universal binary file :
    /usr/bin/lipo -create ${file_exe} -output ${head}/${app}
  
    if [ -d ../comres ] ; then
      find ../comres -maxdepth 1 -name '*' -type f -exec /bin/cp {} ${head}/. \;
      find ../comres -maxdepth 1 -name '*' -type d -exec /bin/cp -R {} ${head}/. \;
      /bin/rm -R -f ${head}/comres
    fi
    /bin/cp ../iOS/Icon.png           ${head}/.
    /bin/cp ../iOS/Icon-72.png        ${head}/.
    /bin/cp ../iOS/Icon-114.png       ${head}/.
    /bin/cp ../iOS/Shaders/Shader.fsh ${head}/.
    /bin/cp ../iOS/Shaders/Shader.vsh ${head}/.
  
    #builtin-infoPlistUtility ioda-Info.plist -genpkginfo /Users/barrand/private/dev/softinex/ioda/ios/build/Release-iphoneos/  ioda.app/PkgInfo -expandbuildsettings -format binary -platform iphoneos -resourcerulesfile /Users/barrand/private/dev/softin  ex/ioda/ios/build/Release-iphoneos/ioda.app/ResourceRules.plist -o /Users/barrand/private/dev/softinex/ioda/ios/build/Releas  e-iphoneos/ioda.app/Info.plist

    if [ -f ../iOS/${app}-Info.plist ] ; then
      /bin/cp ../iOS/${app}-Info.plist tmp_0
  
      from='${EXECUTABLE_NAME}'
      to="${app}"
      sed -e "s|${from}|${to}|g" tmp_0 > tmp_1
  
      from='${PRODUCT_NAME}'
      to="${app}"
      sed -e "s|${from}|${to}|g" tmp_1 > tmp_2
  
      from='${PRODUCT_NAME:rfc1034identifier}'
      to="${app}"
      sed -e "s|${from}|${to}|g" tmp_2 > tmp_3
  
      from='com.yourcompany'
      to="${app_bundle_id}"
      sed -e "s|${from}|${to}|g" tmp_3 > tmp_4
  
      /bin/mv tmp_4 ${head}/Info.plist
  
      /bin/rm -f tmp_0 tmp_1 tmp_2 tmp_3
  
    else 
      echo "bush/app_distrib : ../iOS/${app}-Info.plist not found."
    fi
  
    #///////////////////////////////////////////////////
    #/// interface builder : ///////////////////////////
    #///////////////////////////////////////////////////
    #IBC_MINIMUM_COMPATIBILITY_VERSION=3.2
    #export IBC_MINIMUM_COMPATIBILITY_VERSION
  
    #ibtool='/Applications/Xcode.app/Contents/Developer/usr/bin/ibtool'
    ibtool='ibtool'
  
    ibflags="--errors --warnings --notices"
    ibflags="${ibflags} --output-format human-readable-text"
      
    #NOTE : we have a random "write failed" error when passing from one build app to another.
    #       ibtool confuses the output directory. We enforce absolute path in the below that
    #       seems to cure the problem.
  
    save_dir=`pwd`
  
    if [ `echo ${head} | sed -e s:${save_dir}::g` = ${head} ] ; then
      abs_head="${save_dir}/${head}"
    else
      abs_head="${head}"
    fi
  
    ${ibtool} ${ibflags} --compile ${abs_head}/MainWindow.nib ${save_dir}/../iOS/MainWindow.xib --sdk ${ios_sdk}
    if [ ! -f ${abs_head}/MainWindow.nib ] ; then
      echo "bush/app_distrib : ${abs_head}/MainWindow.nib not produced by ibtool."
      /bin/rm -R -f ${build_path}/distrib
      exit
    fi
    ${ibtool} ${ibflags} --compile ${abs_head}/MainWindow-iPad.nib ${save_dir}/../iOS/Resources-iPad/MainWindow-iPad.xib --sdk ${ios_sdk}
    if [ ! -f ${abs_head}/MainWindow-iPad.nib ] ; then
      echo "bush/app_distrib : ${abs_head}/MainWindow-iPad.nib not produced by ibtool."
      /bin/rm -R -f ${build_path}/distrib
      exit
    fi
  
    #///////////////////////////////////////////////////
    #/// code sign : ///////////////////////////////////
    #///////////////////////////////////////////////////
  
    sign_dev=yes
    if [ ${sign_dev} = yes ] ; then
  
      ios_signature='iPhone Developer'
      /usr/bin/codesign -f -s "${ios_signature}" --entitlements ${bush_home}/iOS/Entitlements.plist ${head}
     
    else
  
      #///////////////////////////////////////////////////
      #/// what xcode does... ////////////////////////////
      #///////////////////////////////////////////////////
      /bin/cp ${bush_home}/app_PkgInfo  ${head}/PkgInfo
      /bin/cp ${bush_home}/iOS/ResourceRules.plist  ${head}/ResourceRules.plist
      /bin/cp ${bush_home}/iOS/embedded.mobileprovision  ${head}/embedded.mobileprovision
  
      #builtin-productPackagingUtility /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk/Entitlements.plis  t -entitlements -format xml -o ../iOS/${app}.xcent
  
      if [ -f ../iOS/${app}.xcent ] ; then
  
        CODESIGN_ALLOCATE=/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate
        export CODESIGN_ALLOCATE
        ios_signature='iPhone Developer: Guy Barrand (L4H5478NAY)'
        /usr/bin/codesign -f -s "${ios_signature}" --resource-rules=${head}/ResourceRules.plist --entitlements ../iOS/${app}.x  cent ${head}
    
      else
        echo "bush/app_distrib : ../iOS/${app}.xcent not found."
      fi
  
    fi
  
    #///////////////////////////////////////////////////
    #/// zip : /////////////////////////////////////////
    #///////////////////////////////////////////////////
    chmod -R a+r ${head}
    find ${head} -name '*' -type d -exec chmod a+x {} \;
  
    platform=cocoa-ios
  
    save_dir=`pwd`
    cd ${build_path}/distrib
    zip -qr ${build_app_distrib_dir}-${version}-${platform}.zip ./${build_app_distrib_dir}
    cd ${save_dir}
  
  fi #file_exe
    
elif [ ${build_iossim} = "yes" ] ; then
  echo "bush/app_distrib : iossim : do nothing."

else
  echo "bush/app_distrib : unknown config."
fi

if [ "${target}" != "" ] ; then

  if [ ${build_verbose} = yes ] ; then
    echo "bush/app_distrib : for ${target} ..."
  fi

  if [ ! -f "${file_exe}" ] ; then
    echo "bush/app_distrib : exe not built."
  else
  
    head_app=${build_path}/distrib/${build_app_distrib_dir}
    head=${head_app}/${version}
    /bin/mkdir -p ${head}/bin
    /bin/cp ${file_exe} ${head}/bin/.    #cp and not mv in case -distrib_only
    file_exe_manifest="${file_exe}.manifest"
    if [ -e "${file_exe_manifest}" ] ; then
      /bin/cp ${file_exe_manifest} ${head}/bin/.
    fi
  
    #if [ "${target}" = "X11" ] ; then
      if [ "${use_archive}" != "yes" ] ; then
        echo "bush/app_distrib : should put in the distrib :"
        echo "  ${libs}"
      fi
    #fi
  
    if [ -d ../comres ] ; then
      /bin/cp -R -f ../comres ${head}/res
    fi
    
    if [ `uname` = Linux ] ; then
      sys_dir="${head}/sys"
      /bin/mkdir -p ${sys_dir}
      ldd ${head}/bin/${app_exe} > ./tmp_0
      awk '{if ($2 == "=>") print "cp " $3 " target_dir"; else print "cp " $1 " target_dir";}' ./tmp_0 > ./tmp_1
      grep '.so' ./tmp_1 > ./tmp_2
      sed -e "s:target_dir:${sys_dir}:g" ./tmp_2 > ./tmp_3
      chmod a+x ./tmp_3
      ./tmp_3
      /bin/rm -f ./tmp_0 ./tmp_1 ./tmp_2 ./tmp_3
  
      /bin/cp ${bush_home}/exec_app ./tmp_0
      sed -e "s:target_app_exe:${app_exe}:g" ./tmp_0 > ${head}/bin/exec_${app}
      chmod a+x ${head}/bin/exec_${app}
      /bin/rm -f ./tmp_0
  
      dri_so=/usr/lib/x86_64-linux-gnu/dri/swrast_dri.so  # ubuntu-14.04.3.
      if [ ! -f ${dri_so} ] ; then
        dri_so=/usr/lib64/dri/swrast_dri.so          # sl-release-6.7-1.slc6.x86_64
      fi
      if [ -f ${dri_so} ] ; then
        dri_dir="${head}/dri"
        /bin/mkdir -p ${dri_dir}
        /bin/cp ${dri_so} ${dri_dir}/.
        # find related shared libs :
        ldd ${dri_so} > ./tmp_0
        awk '{if ($2 == "=>") print "cp " $3 " target_dir"; else print "cp " $1 " target_dir";}' ./tmp_0 > ./tmp_1
        grep '.so' ./tmp_1 > ./tmp_2
        sed -e "s:target_dir:${sys_dir}:g" ./tmp_2 > ./tmp_3
        chmod a+x ./tmp_3
        ./tmp_3
        /bin/rm -f ./tmp_0 ./tmp_1 ./tmp_2 ./tmp_3
  
        sed -e "s:#LIBGL_DRIVERS_PATH:LIBGL_DRIVERS_PATH:g" ${head}/bin/exec_${app} > ./tmp_0
        /bin/mv ./tmp_0 ${head}/bin/exec_${app}
        chmod a+x ${head}/bin/exec_${app}
  
      fi
  
    fi 
      
    platform=`${bush_home}/platform "${cpp_compiler}"`
    if [ "${platform}" = "" ] ; then
      echo "bush/app_distrib : can't guess platform for ${cpp_compiler}."
    else
      if [ ${build_verbose} = yes ] ; then
        echo "bush/app_distrib : platform is ${platform}."
      fi
    
      chmod -R a+r ${head_app}
      find ${head_app} -name '*' -type d -exec chmod a+x {} \;
  
      #///////////////////////////////////////////////////
      #/// zip : /////////////////////////////////////////
      #///////////////////////////////////////////////////
      save_dir=`pwd`
        
      ${bush_home}/check_app zip 'zip not found, we use tar.'
      use_status=$?;
      if [ ${use_status} != 0 ] ; then
        cd ${build_path}/distrib
        tar cf ${build_app_distrib_dir}-${version}-${platform}.tar ./${build_app_distrib_dir}
        cd ${save_dir}
      else
        cd ${build_path}/distrib
        zip -qr ${build_app_distrib_dir}-${version}-${platform}.zip ./${build_app_distrib_dir}
        cd ${save_dir}
      fi
    fi
  
  fi #file_exe

fi

fi
