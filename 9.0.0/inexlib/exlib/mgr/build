#!/bin/sh -f

bush_home=`dirname $0`/../../../bush

inlib_home=${bush_home}/../inexlib/inlib
exlib_home=${bush_home}/../inexlib/exlib

what=""

build_verbose=no
build_args=

while test $# -ge 1 ; do
  case $1 in
    -v) build_verbose=yes;build_args="${build_args} $1";;
    -*) build_args="${build_args} $1";;
     *) if [ $# = 1 ] ; then what=$1; else echo "unknown option : $1"; fi;;
  esac
  shift
done

if [ "${what}" = "" ] ; then
  # cleanup before starting :

  ${bush_home}/find_rm ../examples/cpp 'exlib_example_*'
  ${bush_home}/find_rm ../examples/cpp 'moc_*'
  ${bush_home}/find_rm ../exlib '*.gch.*'
  ${bush_home}/find_rm ../exlib '*.cxx'
  find ../exlib -name "*" -type f -exec grep inlib.license {} \;

  find ../exlib -name '*' -type f -exec ./build ${build_args} {} \;
#  exit

  dirs=
  dirs="${dirs} ../apps"
  dirs="${dirs} ../tests"
  for dir in ${dirs} ; do
    find ${dir} -maxdepth 1 -name '*.cpp' -type f -exec ./build ${build_args} {} \;
  done

  # NOTE : for exas, we use the local build script.
  find ../examples/cpp -maxdepth 1 -name '*.cpp' -type f -exec ./build_exa ${build_args} {} \;

  exit
fi

if [ -d "${what}" ] ; then
  find ${what} -maxdepth 1 -name "*" -type f -exec ./build ${build_args} {} \;
  exit
fi

base_name=`basename ${what}`

if [ "${what}" = "${base_name}" ] ; then
  # only the name entered, find exact places :
  found="`find .. -name "${base_name}" -print`"
  if [ "${found}" = "" ] ; then
    echo "not found."
  else
    find .. -name "${base_name}" -type f -print -exec ./build ${build_args} {} \;
  fi
  exit
fi

if [ "`echo ${what} | grep examples`" != "" ] ; then
  ./build_exa ${build_args} ${what}
  exit
fi

dir=`dirname ${what}`
name=`basename ${what}`
group=`basename ${dir}`

dir_dir=`dirname ${dir}`
sub_group=`basename ${dir_dir}`

suffix=`echo ${base_name} | sed 's:.*\.::'`
if [ "${suffix}" = "${base_name}" ] ; then suffix=none;fi

file_java="`echo ${base_name} | sed 's:_java::g'`"
if [ "${file_java}" = "${base_name}" ] ; then file_java=no; else file_java=yes; fi

name=`echo ${name} | sed -e "s:\.${suffix}::g"`

#echo "dir : ${dir} ..."
#echo "group : ${group} ..."
#echo "base_name : ${base_name} ..."
#echo "name : ${name} ..."
#echo "suffix : ${suffix} ..."
#exit

#////////////////////////////////////
#/// to skip : //////////////////////
#////////////////////////////////////
if [ "${file_java}" = yes ] ; then exit;fi

if [ "${suffix}" = "f" -o "${suffix}" = "lua" -o "${suffix}" = "icc" -o "${suffix}" = "pyc" -o "${suffix}" = "py" -o "${suffix}" = "gmk" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "exlib/mgr/build : suffix ${suffix} not treated.";
  fi
  exit
fi
if [ "${suffix}" = "y" -o "${suffix}" = "l" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "exlib/mgr/build : suffix ${suffix} not treated.";
  fi
  exit
fi

if [ "`echo ${what} | grep '\.ps'`" != "" ] ; then exit; fi

if [ ${group} = "CVS" ] ; then exit;fi
if [ ${name} = "README" ] ; then exit;fi

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////
if [ ${build_verbose} = yes ] ; then
  echo "exlib/mgr/build : ${what} in group ${group} ..."
fi

if [ ${name} = "iv2wall" -o ${name} = "iv2bsg" -o ${name} = "iv2png" ] ; then
  build_args="${build_args} -bin_batch -inlib_gl"
  echo "exlib/build : ${name} : enforce -bin_batch -inlib_gl."
fi

. ${bush_home}/exlib_header

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////
if [ ${build_visual} = "yes" ] ; then
  # to rm warnings in [in,ex]lib_swig_py.cpp about "fail:" not referenced.
  cppflags="${cppflags} -wd4102"
fi

#////////////////////////////////////
#/// swig ///////////////////////////
#////////////////////////////////////
swig_incs=
#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

is_plugin=no
is_so_plugin=no
is_py_plugin=no
is_app=no
is_swig_py=no
is_swig_lua=no
is_flex=no
is_yacc=no

if [ ${group} = "apps" ] ; then
  is_app=yes
fi
if [ ${group} = "tests" ] ; then
  is_app=yes
fi

objs=""
libs=""

f77_objs=""
f77_libs=""

use_our_stl=${build_use_our_stl}

if [ ${build_verbose} = yes ] ; then
  echo "exlib/mgr/build : build path is ${build_path}"
fi

/bin/mkdir -p ${build_path}

#//////////////////////////////////////////////////////////
#/// look for an //exlib_build_use in ${what} /////////////
#//////////////////////////////////////////////////////////
auto_use_pack=exlib
auto_use_file="${what}"
. ${bush_home}/auto_use
#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////
#//////////////////////////////////////////////////////////

if [ ${is_app} = "yes" ] ; then
  #echo dummy > /dev/null

  if [ ${name} = "utest" ] ; then
    if [ ${build_visual} = "yes" ] ; then
      cppflags="${cppflags} -bigobj"
    fi
  fi

  if [ ${name} = "iv2wall" -o ${name} = "iv2bsg" -o ${name} = "iv2png" ] ; then
    if [ ${build_visual} = "yes" ] ; then
      use_win32=yes
    else
      if [ `uname` = "Linux" ] ; then
        use_thread=yes
      fi
    fi
    use_GL=no
    echo "exlib/build : ${name} : disconnect use/GL."
  fi

  if [ ${name} = "aida_cern_root" ] ; then
    if [ "${ROOTSYS}" = "" ] ; then
      echo "exlib/mgr/build : to build ${name} you have to 'source setup' CERN-ROOT."
      exit
    fi

    #////////////////////////////////////////////////
    #// look if root-config is around : /////////////
    #////////////////////////////////////////////////
    ${bush_home}/check_app root-config 'root-config program not found. You have to <source setup> CERN-ROOT.'
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi

    cern_root_cxx="`root-config --cxx`"

    if [ `uname` = "Darwin" ] ; then
      # NOTE : CERN-ROOT does not compile with clang++ 3.0.
      if [ "${cpp_compiler}" != "g++" ] ; then
        if [ "${cern_root_cxx}" = "g++" ] ; then
          echo "exlib/mgr/build : CERN-ROOT built with g++. Required compiler is ${cpp_compiler}."
          exit
        fi
      fi
    fi

    #////////////////////////////////////////////////
    #// Generating the CINT wrapping : //////////////
    #////////////////////////////////////////////////
    eval `root-config --bindir`/rootcint -f G__exlib.cpp -c -I${inlib_home} -I${exlib_home} ${exlib_home}/exlib/cern_root/exlib_def.h ${exlib_home}/exlib/cern_root/exlib_LinkDef.h
    cppfiles="${cppfiles} ./G__exlib.cpp"
    to_rm="${to_rm} G__exlib.cpp G__exlib.h"
  fi

else # lib

  if [ "${sub_group}" = "app" -a ${group} = "Cocoa" ] ; then echo 'bypass exlib/app/Cocoa group.';exit;fi
  if [ "${sub_group}" = "app" -a ${group} = "iOS" ] ; then echo 'bypass exlib/app/Cocoa group.';exit;fi

  if [ ${group} = "Windows" ] ; then
    if [ ${build_visual} != "yes" ] ; then exit;fi
  fi

  if [ ${group} = "cern_root" ] ; then
    if [ "${ROOTSYS}" = "" ] ; then
      echo "exlib/mgr/build : to build ${name} you have to 'source setup' CERN-ROOT."
      exit
    fi

    # look if root-config is around :
    ${bush_home}/check_app root-config 'root-config program not found. You have to <source setup> CERN-ROOT.'
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi

    cern_root_cxx="`root-config --cxx`"

    if [ `uname` = "Darwin" ] ; then
      # NOTE : CERN-ROOT does not compile with clang++ 3.0.
      if [ "${cpp_compiler}" != "g++" ] ; then
        if [ "${cern_root_cxx}" = "g++" ] ; then
          echo "exlib/mgr/build : CERN-ROOT built with g++. Required compiler is ${cpp_compiler}."
          exit
        fi
      fi
    fi

    if [ ${name} = "inlib_LinkDef.h" ] ; then exit;fi
    if [ ${name} = "inlib_def.h" ] ; then exit;fi

    if [ ${name} = "inlib_cern_root" ] ; then
      is_plugin=yes
      is_so_plugin=yes
      plugin=${name}
      cppfiles="${cppfiles} ${what}"

      rcint_exe=`root-config --bindir`/rootcint

      # Generating the inlib CERN-ROOT CINT wrapping :
      eval ${rcint_exe} -f G__inlib.cpp -c -I../../inlib ${dir}/inlib_def.h ${dir}/inlib_LinkDef.h 

      cern_root_flags=`root-config --cflags`

      obj=${build_path}/G__inlib.o
      eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${cern_root_flags} -I../../inlib G__inlib.cpp 
      use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
      objs="${objs} ${obj}"
      /bin/rm -f G__inlib.h G__inlib.cpp

      libs="${libs} `root-config --libs`"

    fi

    if [ ${name} = "exlib_LinkDef.h" ] ; then exit;fi
    if [ ${name} = "exlib_def.h" ] ; then exit;fi

    if [ ${name} = "exlib_cern_root" ] ; then
      is_plugin=yes
      is_so_plugin=yes
      plugin=${name}
      cppfiles="${cppfiles} ${what}"

      rcint_exe=`root-config --bindir`/rootcint

      # Generating the inlib CERN-ROOT CINT wrapping :
      eval ${rcint_exe} -f G__exlib.cpp -c -I../../inlib -I../../exlib ${dir}/exlib_def.h ${dir}/exlib_LinkDef.h 

      cern_root_flags=`root-config --cflags`

      obj=${build_path}/G__exlib.o
      eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${cern_root_flags} -I../../inlib -I../../exlib G__exlib.cpp 
      use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
      objs="${objs} ${obj}"
      /bin/rm -f G__exlib.h G__exlib.cpp

      libs="${libs} `root-config --libs`"

    fi

  fi

  if [ ${group} = "spy" ] ; then
    if [ ${base_name} = "inlib_swig.i" ] ; then
      is_swig_py=yes
      swig_incs="${swig_incs} -I../../inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib/histo"
      swig_incs="${swig_incs} -I../../inlib/inlib/waxml"
      swig_incs="${swig_incs} -I../../inlib/inlib/sg"
    fi
    if [ ${name} = "inlib_swig_py" ] ; then
      is_plugin=yes
      is_py_plugin=yes
      plugin=${name}
      pyname=${name}
      cppfiles="${cppfiles} ${what}"
    fi

    if [ ${base_name} = "exlib_swig.i" ] ; then
      is_swig_py=yes
      swig_incs="${swig_incs} -I../../inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib/histo"
      swig_incs="${swig_incs} -I../../inlib/inlib/waxml"
      swig_incs="${swig_incs} -I../../inlib/inlib/sg"
      swig_incs="${swig_incs} -I../../inlib/inlib/ttf"

      swig_incs="${swig_incs} -I../../inlib/inlib/io"

      swig_incs="${swig_incs} -I../../exlib"
      swig_incs="${swig_incs} -I../../exlib/exlib/swig"
      swig_incs="${swig_incs} -I../../ourex/glutess"
      swig_incs="${swig_incs} -I../../ourex/glutess/glutess"
#      swig_incs="${swig_incs} -I../../ourex/freetype/include"
      swig_incs="${swig_incs} -I../../ourex/gl2ps"
      swig_incs="${swig_incs} -I../../ourex/gl2ps/gl2ps"
      swig_incs="${swig_incs} -I../../exlib/exlib/sg"
    fi

    if [ ${name} = "exlib_swig_py" ] ; then
      is_plugin=yes
      is_py_plugin=yes
      plugin=${name}
      pyname=${name}
      cppfiles="${cppfiles} ${what}"
    fi

  fi

  if [ ${group} = "yacc" ] ; then
    use_inlib=yes
  fi

  if [ ${group} = "slua" ] ; then
    if [ ${base_name} = "inlib_swig.i" ] ; then
      is_swig_lua=yes
      swig_incs="${swig_incs} -I../../inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib/histo"
      swig_incs="${swig_incs} -I../../inlib/inlib/waxml"
      swig_incs="${swig_incs} -I../../inlib/inlib/sg"
    fi
    if [ ${name} = "inlib_swig_lua" ] ; then
      is_plugin=yes
      plugin=${name}
      cppfiles="${cppfiles} ${what}"
    fi

    if [ ${base_name} = "exlib_swig.i" ] ; then
      is_swig_lua=yes
      swig_incs="${swig_incs} -I../../inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib"
      swig_incs="${swig_incs} -I../../inlib/inlib/histo"
      swig_incs="${swig_incs} -I../../inlib/inlib/waxml"
      swig_incs="${swig_incs} -I../../inlib/inlib/sg"
      swig_incs="${swig_incs} -I../../inlib/inlib/ttf"

      swig_incs="${swig_incs} -I../../inlib/inlib/io"

      swig_incs="${swig_incs} -I../../exlib"
      swig_incs="${swig_incs} -I../../exlib/exlib/swig"
      swig_incs="${swig_incs} -I../../ourex/glutess"
      swig_incs="${swig_incs} -I../../ourex/glutess/glutess"
#      swig_incs="${swig_incs} -I../../ourex/freetype/include"
      swig_incs="${swig_incs} -I../../ourex/gl2ps"
      swig_incs="${swig_incs} -I../../ourex/gl2ps/gl2ps"
      swig_incs="${swig_incs} -I../../exlib/exlib/sg"
    fi
    if [ ${name} = "exlib_swig_lua" ] ; then
      is_plugin=yes
      plugin=${name}
      cppfiles="${cppfiles} ${what}"

      if [ ${build_visual} = "yes" ] ; then
        use_win32=yes
      else
        use_X11=yes
        use_GLX=yes
      fi
    fi

  fi

  if [ ${group} = "sg" ] ; then
    if [ ${name} = "gl_manager" ] ; then
      if [ ${build_visual} = "yes" ] ; then
        echo "exlib/mgr/build : WARNING : today -DEXLIB_HAS_VBO not supported."
      else
        cppflags="${cppflags} -DEXLIB_HAS_VBO"
      fi
    fi
    if [ ${name} = "render_GL" ] ; then
      if [ ${build_visual} = "yes" ] ; then
        echo "exlib/mgr/build : WARNING : today -DEXLIB_HAS_VBO not supported."
      else
        cppflags="${cppflags} -DEXLIB_HAS_VBO"
      fi
    fi
    if [ ${name} = "polyhedron" ] ; then
      if [ ${build_visual} = "yes" ] ; then
        echo "exlib/mgr/build : WARNING : today -DEXLIB_HAS_VBO not supported."
      else
        cppflags="${cppflags} -DEXLIB_HAS_VBO"
      fi
    fi

  fi

  if [ ${name} = "exas" ] ; then
    if [ ${build_visual} = "no" ] ; then
      if [ ${build_clang} = "no" ] ; then
        use_SOPHYA=yes
        cppflags="${cppflags} -DEXLIB_HAS_SOPHYA"  
      fi
    fi
  fi

  if [ ${group} = "povama" ] ; then
    if [ ${build_visual} = "yes" ] ; then
      echo "exlib/mgr/build : WARNING : today -DEXLIB_HAS_VBO not supported."
    else
      cppflags="${cppflags} -DEXLIB_HAS_VBO"
    fi
  fi

  if [ ${group} = "geant4" ] ; then

    if [ ${name} = "exas" ] ; then
      cppflags="${cppflags} -DEXLIB_HAS_PYTHIA8"  
      use_pythia8=yes
    fi

    if [ ${name} = "viewer" ] ; then
      cppflags="${cppflags} -DEXLIB_HAS_PYTHIA8"  
      use_pythia8=yes
    fi
    if [ ${name} = "primary_generator" ] ; then
      cppflags="${cppflags} -DEXLIB_HAS_PYTHIA8"  
      use_pythia8=yes
    fi

  fi

fi  # end if app

#////////////////////////////////////
#/// external packages //////////////
#////////////////////////////////////

if [ ${suffix} = "l" ] ; then
  use_yacc=yes
  is_flex=yes
fi
if [ ${suffix} = "y" ] ; then
  use_yacc=yes
  is_yacc=yes
fi
if [ ${suffix} = "i" ] ; then
  use_swig=yes
fi

if [ "${use_screen}" = "yes" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    use_win32=yes
  else
    use_X11=yes
    use_GLX=yes
  fi
fi

if [ "${use_cexpr}" = "yes" ] ; then
  cppfiles="${cppfiles} ../exlib/yacc/cexpr_lexer.cpp"
  cppfiles="${cppfiles} ../exlib/yacc/cexpr_eval.cpp"
fi

. ${bush_home}/use/inlib
. ${bush_home}/use/exlib

#/////////////////////////////////
#/// gui and windowing : /////////
#/////////////////////////////////

. ${bush_home}/use/gtk
. ${bush_home}/use/gtkglarea

. ${bush_home}/use/wx
. ${bush_home}/use/Qt
. ${bush_home}/use/Xm
. ${bush_home}/use/XmOpenGLArea
. ${bush_home}/use/Android

. ${bush_home}/use/Xt
. ${bush_home}/use/GLX # before X11
. ${bush_home}/use/X11
. ${bush_home}/use/win32

#/////////////////////////////////
#/// graphics : //////////////////
#/////////////////////////////////
. ${bush_home}/use/HEPVis
. ${bush_home}/use/CoinGL
. ${bush_home}/use/GL

#/////////////////////////////////
#/// over C/C++ only /////////////
#/////////////////////////////////
. ${bush_home}/use/gl2ps
. ${bush_home}/use/glutess
. ${bush_home}/use/csz
. ${bush_home}/use/freetype
. ${bush_home}/use/jpeg
. ${bush_home}/use/expat
. ${bush_home}/use/Eigen

. ${bush_home}/use/SOPHYA
. ${bush_home}/use/cfitsio
. ${bush_home}/use/sqlite
. ${bush_home}/use/Python
. ${bush_home}/use/lua
. ${bush_home}/use/graphviz
. ${bush_home}/use/dcmtk
. ${bush_home}/use/gsl
. ${bush_home}/use/gmp
. ${bush_home}/use/wcslib

. ${bush_home}/use/tntnet  # it needs zip
. ${bush_home}/use/zip     # it needs zlib
. ${bush_home}/use/png     # it needs zlib
. ${bush_home}/use/hdf5    # it needs zlib
. ${bush_home}/use/zlib
. ${bush_home}/use/Getline
. ${bush_home}/use/KUIP

. ${bush_home}/use/swig
. ${bush_home}/use/yacc

. ${bush_home}/use/mpi

. ${bush_home}/use/geant4
. ${bush_home}/use/AIDA
. ${bush_home}/use/cern_root # :-(
. ${bush_home}/use/cernlib   # :-(
. ${bush_home}/use/pythia8

. ${bush_home}/use/socket
. ${bush_home}/use/thread
. ${bush_home}/use/dl
. ${bush_home}/use/util
. ${bush_home}/use/lm

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////
if [ `uname` = "Linux" ] ; then
  if [ "${use_lapack}" = "yes" ] ; then
    use_archive=no # to avoid the multiple definition xerbla_ problem.
    use_gfortran=yes
  fi
fi
. ${bush_home}/use/lapack
. ${bush_home}/use/gfortran

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

# let the freedom to not use G4_cppflags for some components :
# -Wshadow is a pain with CLHEP.
#if [ ${name} != "inlib_swig_py" -a ${name} != "exlib_swig_py" ] ; then
#  cppflags="${G4_cppflags} ${cppflags}"
#fi

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////
#set -x

if [ ${is_app} = "yes" ] ; then

  app_src=${what}
  app_exe=${name}
  app_name=${name}

  . ${bush_home}/application

  /bin/rm -f ${objs}

elif [ ${is_plugin} = "yes" ] ; then

  if [ ${is_py_plugin} = "yes" ] ; then
    if [ "${use_our_Python}" = "yes" ] ; then
      echo "exlib/mgr/build : WARNING : Python plugins mechanism not available wiht ourex/Python."
    fi
  fi

  . ${bush_home}/compile
  . ${bush_home}/plugin

  if [ "${is_so_plugin}" = "yes" ] ; then
    /bin/mv ${file_plugin} ${build_path}/${name}.so
  fi

elif [ ${is_swig_py} = "yes" ] ; then
  name=`echo ${name} | sed -e 's:\.i::g'`
 
  if [ ! -d ${pivy_home} ] ; then
    echo "exlib/mgr/build : directory ${pivy_home} not found."
    exit
  fi

  swig_incs="-I${pivy_home} -I${pivy_home}/fake_headers ${swig_incs}"

  swig_flags="-includeall -modern"
  swig_flags="${swig_flags} -D__PIVY__"
  swig_flags="${swig_flags} -w302,306,307,312,389,361,362,467,503,509,510"
  swig_flags="${swig_flags} -fcompact"

  swig_out_file=../exlib/spy/${name}_py.icc
    
  if [ ${build_verbose} = yes ] ; then
    echo "exlib/mgr/build : swig program is : ${swig_exe}"
  fi

  eval ${swig_exe} -interface ${name}_py -python -c++ ${swig_flags} ${swig_incs} -o ${swig_out_file} ../exlib/spy/${name}.i
    
  sed -e 's#PyErr_Format(PyExc_RuntimeError, mesg)#PyErr_Format(PyExc_RuntimeError, "%s",mesg)#g' ${swig_out_file} > tmp_0
  mv tmp_0 ${swig_out_file}
  /bin/rm -f tmp_0

elif [ ${is_swig_lua} = "yes" ] ; then

  name=`echo ${name} | sed -e 's:\.i::g'`

  swig_incs="-I${pivy_home} -I${pivy_home}/fake_headers ${swig_incs}"

  swig_flags="-includeall"
#  swig_flags="${swig_flags} -modern"
#  swig_flags="${swig_flags} -D__PIVY__"
  swig_flags="${swig_flags} -w302,306,307,312,389,361,362,467,503,509,510"
  swig_flags="${swig_flags} -fcompact"

  swig_out_file=../exlib/slua/${name}_lua.icc
    
  if [ ${build_verbose} = yes ] ; then
    echo "exlib/mgr/build : swig program is : ${swig_exe}"
  fi

  eval ${swig_exe} -lua -c++ ${swig_flags} ${swig_incs} -o ${swig_out_file} ../exlib/slua/${name}.i
#  eval ${swig_exe} -interface ${name}_lua -lua -c++ ${swig_flags} ${swig_incs} -o ${swig_out_file} ../exlib/slua/${name}.i
    
#  sed -e 's#PyErr_Format(PyExc_RuntimeError, mesg)#PyErr_Format(PyExc_RuntimeError, "%s",mesg)#g' ${swig_out_file} > tmp_0
#  mv tmp_0 ${swig_out_file}
#  /bin/rm -f tmp_0

elif [ ${is_flex} = "yes" ] ; then

  eval ${flex_exe} ${what}

  # Remove include unistd.h that does not compile on NT :
  sed 's|#include <unistd.h>||g' lex.yy.c > tmp0
  sed 's|static int yy_get_next_buffer (void );|//static int yy_get_next_buffer (void );|g' tmp0 > tmp1
  sed 's|static int yy_get_next_buffer (void)|static int yy_get_next_buffer(exlib::yacc::cexpr_lexer\& aLexer)|g' tmp1 > tmp2
  sed 's|yy_get_next_buffer(  )|yy_get_next_buffer(aLexer)|g' tmp2 > tmp3
  sed 's|yy|cexpr_lexer_|g' tmp3 > ../exlib/yacc/cexpr_lexer.cpp
  rm -f lex.yy.c
  rm -f tmp0 tmp1 tmp2 tmp3

elif [ ${is_yacc} = "yes" ] ; then

  eval ${yacc_exe} -d ${what}

  sed 's|yylex()|yylex(aParser.lexer())|g' y.tab.c > tmp0
  sed 's|extern int yyparse(void)|//extern int yyparse(void)|g' tmp0 > tmp1
  sed 's|yyparse(void)|yyparse(exlib::yacc::cexpr_eval\& aParser)|g' tmp1 > tmp2
  sed 's|yyerror("|yyerror(aParser,"|g' tmp2 > tmp3
  # change names :
  sed 's|yylex|cexpr_lexer_lex|g' tmp3 > tmp4
  #sed 's|yylval|cexpr_lval|g' y.tab.c > tmp
  sed 's|yy|cexpr_eval_|g' tmp4 > ../exlib/yacc/cexpr_eval.cpp

  sed 's|yy|cexpr_eval_|g' y.tab.h > tmp0
  grep -v 'IS_DECLARED' tmp0 > tmp1
  grep -v '#endif' tmp1 | grep -v '#ifdef YYSTYPE' > tmp2

  cat > ../exlib/yacc/cexpr_tokens <<HEAD_END
// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_yacc_cexpr_tokens
#define exlib_yacc_cexpr_tokens

namespace inlib {class valop;}

HEAD_END

  cat tmp2 >> ../exlib/yacc/cexpr_tokens

  cat >> ../exlib/yacc/cexpr_tokens <<TAIL_END

#endif
TAIL_END

  rm -f y.tab.c
  rm -f y.tab.h
  rm -f tmp0 tmp1 tmp2 tmp3 tmp4 tmp5


else

  cppfiles="${cppfiles} ${what}"

  . ${bush_home}/compile

fi

/bin/rm -f ${objs}
/bin/rm -f ${to_rm}
