
# to be sourced from another build script.

for file in ${ccfiles}  ; do echo ${file} >> cpp_tmp; done
for file in ${cxxfiles} ; do echo ${file} >> cpp_tmp; done
for file in ${C_files}  ; do echo ${file} >> cpp_tmp; done
for file in ${cppfiles} ; do echo ${file} >> cpp_tmp; done

if [ -f cpp_tmp ] ; then
for file in $(cat cpp_tmp) ; do
  oname=`basename ${file}`

  oname=`echo ${oname} | sed -e 's:\.cc::g'`
  oname=`echo ${oname} | sed -e 's:\.cxx::g'`
  oname=`echo ${oname} | sed -e 's:\.C::g'`
  oname=`echo ${oname} | sed -e 's:\.cpp::g'`

  for item in ${archive_headers} ; do
    if [ ${item} = ${oname} ] ; then
      _cppflags="-DINLIB_TAKE_CODE"
    fi
  done

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
    if [ ${build_verbose} = yes ] ; then
      echo "bush/compile_cpp : do ${file} ..."
    fi
    if [ -f ${obj} ] ; then
      echo "bush/compile_cpp : WARNING : ${obj} already exists."
    fi
    eval ${cpp_compiler} -x c++ -c ${cppflags} ${_cppflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  objs="${objs} ${obj}"
done
/bin/rm -f cpp_tmp
fi
