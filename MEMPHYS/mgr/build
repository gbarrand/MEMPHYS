#!/bin/sh -f

. ./find_bush

#. ${bush_home}/args

build_batch=no
build_geant4_10x=no
build_geant4_95=no
build_geant4_82=no

found=no

build_root=no
build_args=
while test $# -ge 1 ; do
  case $1 in
    -g410x) build_geant4_10x=yes;found=yes;;
    -g495) build_geant4_95=yes;found=yes;;
    -g482) build_geant4_82=yes;found=yes;;

    -root) build_root=yes;;
    -batch) build_batch=yes;;
     *) build_args="${build_args} $1";;
  esac
  shift
done

if [ ${found} = "no"  ] ; then build_geant4_10x=yes;fi

old_build_args="${build_args}" # to avoid duplicating -cpp_11 in lib and apps args :
if [ ${build_geant4_10x} = "yes" ] ; then
  build_args="${build_args} -cpp_11 -bdir_suffix=_11"
fi

. ${bush_home}/ourex_header # to build the below build distrib.

build_args="${old_build_args}"

if [ ${build_geant4_10x} = "yes" ] ; then build_args="${build_args} -g410x"; fi
if [ ${build_geant4_95} = "yes" ] ; then build_args="${build_args} -g495"; fi
if [ ${build_geant4_82} = "yes" ] ; then build_args="${build_args} -g482"; fi

if [ ${build_root} = yes ] ; then
  if [ ${build_batch} = no ] ; then
    ${bush_home}/check_app root-config 'root-config program not found.'
    has_root=$?
    if [ ${has_root} = 0 ] ; then
      ./build_app_read_plot_ROOT ${build_args}
      ./build_app_all_ROOT       ${build_args}
      ./build_app_geom_ROOT      ${build_args}
    fi
  fi
  
else

  ./build_lib_MEMPHYSCore         ${build_args}
  ./build_app_sim                 ${build_args}
  ./build_app_read_plot_offscreen ${build_args}

  if [ ${build_batch} = no ] ; then
    ./build_app_read_plot     ${build_args}
  fi
  
fi

if [ ${build_distrib} = "yes" ] ; then
  /bin/rm -R -f ${build_path}/distrib
    
  version="`${bush_home}/app_vers`"
  
  install_dir="${build_path}/distrib/MEMPHYS/${version}"

  /bin/rm -R -f ${install_dir}/bin
  /bin/mkdir -p ${install_dir}/bin

  apps="MEMPHYS_sim MEMPHYS_read_plot_offscreen"
  if [ ${build_batch} = no ] ; then
    apps="${apps} MEMPHYS_read_plot MEMPHYS_read_plot_ROOT MEMPHYS_all_ROOT"
  fi
    
  for item in ${apps} ; do  
    if [ ${build_visual} = "yes" ] ; then
      if [ -x ${build_path}/${item}.exe ] ; then
        /bin/cp ${build_path}/${item}.exe ${install_dir}/bin/.
      else
        echo "MEMPHYS/mgr/build : distrib : ${build_path}/${item}.exe not found."
      fi
      if [ -f ${build_path}/${item}.exe.manifest ] ; then
        /bin/cp ${build_path}/${item}.exe.manifest ${install_dir}/bin/.
      fi
    else
      if [ -x ${build_path}/${item} ] ; then
        /bin/cp ${build_path}/${item} ${install_dir}/bin/.
      else
        echo "MEMPHYS/mgr/build : distrib : ${build_path}/${item} not found."
      fi      
    fi      
  done
    
  find . -maxdepth 1 -name 'run*setup.csh' -exec /bin/cp {} ${install_dir}/. \;
  find . -maxdepth 1 -name 'run*setup.sh' -exec /bin/cp {} ${install_dir}/. \;
  
  find . -maxdepth 1 -name 'gcc_*.csh' -exec /bin/cp {} ${install_dir}/. \;
  find . -maxdepth 1 -name 'gcc_*.sh' -exec /bin/cp {} ${install_dir}/. \;
  
  /bin/cp cern_root_setup.sh ${install_dir}/.
  /bin/cp cern_root_setup.csh ${install_dir}/.
  /bin/cp ../doc/README ${install_dir}/.

  /bin/rm -R -f ${install_dir}/res
  /bin/mkdir -p ${install_dir}/res
  
  /bin/mkdir -p ${install_dir}/res/fonts
  /bin/cp ../exa_run/times.ttf ${install_dir}/res/fonts/.
  
  /bin/mkdir -p ${install_dir}/res/MEMPHYS/scripts
  /bin/cp -R ../scripts/ROOT ${install_dir}/res/MEMPHYS/scripts/.
  /bin/cp -R ../scripts/geant4 ${install_dir}/res/MEMPHYS/scripts/.
  /bin/cp -R ../scripts/slurm ${install_dir}/res/MEMPHYS/scripts/.

  # exa run env :
  exa_run_dir="${install_dir}/exa_run"
  /bin/mkdir -p ${exa_run_dir}
  /bin/cp ../exa_run/times.ttf             ${exa_run_dir}/.
  /bin/cp ../scripts/geant4/init.g4m       ${exa_run_dir}/.
  /bin/cp ../scripts/geant4/inputEventfile ${exa_run_dir}/.
  /bin/cp ../scripts/geant4/jobOptions.mac ${exa_run_dir}/.
  /bin/cp ../scripts/slurm/sim_slurm       ${exa_run_dir}/.
  /bin/cp ../scripts/ROOT/analysis.C       ${exa_run_dir}/.
  /bin/cp ../scripts/ROOT/hits.C           ${exa_run_dir}/.

  platform=`${bush_home}/platform "${cpp_compiler}"`
  if [ "${platform}" = "" ] ; then
    echo "bush/app_distrib : can't guess platform for ${cpp_compiler}."
    exit
  fi
  
  save_dir=`pwd`
  
  ${bush_home}/check_app zip 'zip not found, we use tar.'
  use_status=$?;
  if [ ${use_status} != 0 ] ; then
    cd ${build_path}/distrib
    tar cf MEMPHYS-${version}-${platform}.tar ./MEMPHYS
    cd ${save_dir}
  else
    cd ${build_path}/distrib
    zip -qr MEMPHYS-${version}-${platform}.zip ./MEMPHYS
    cd ${save_dir}
  fi
   
fi

