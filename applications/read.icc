
#include <inlib/rroot/tree_manip>

#define FIND_LEAF(a__tree,a__type,a__name) \
  inlib::rroot::branch* br_##a__name;\
  inlib::rroot::leaf<a__type>* leaf_##a__name;\
  if(!inlib::rroot::find_leaf(a__tree,#a__name,br_##a__name,leaf_##a__name)) return false;

#define FIND_LEAF_NAME(a__tree,a__type,a__name,a__sname) \
  inlib::rroot::branch* br_##a__name;\
  inlib::rroot::leaf<a__type>* leaf_##a__name;\
  if(!inlib::rroot::find_leaf(a__tree,a__sname,br_##a__name,leaf_##a__name)) return false;

#define FIND_LEAF_OBJECT(a__tree,a__name) \
  inlib::rroot::branch* br_##a__name;\
  inlib::rroot::leaf_object* leaf_##a__name;\
  if(!inlib::rroot::find_leaf(a__tree,#a__name,br_##a__name,leaf_##a__name)) return false;

#define READ_LEAF(a__tree,a__index,a__type,a__name) \
  a__type a__name;\
  if(!inlib::rroot::read_leaf((a__tree).file(),*br_##a__name,*leaf_##a__name,a__index,a__name)) return false;


template <class H1D>
inline bool process_hits_times(inlib::rroot::tree& a_tree,H1D& aHisto) {
  FIND_LEAF(a_tree,float,time)
  inlib::uint64 nentries = a_tree.entries();
  for(inlib::uint32 index=0;index<nentries;index++) {
    READ_LEAF(a_tree,index,float,time)
    aHisto.Fill(time);
  }
  return true;
}

template <class H1D>
inline bool process_hits(inlib::rroot::tree& a_tree,H1D& aHisto) {

  FIND_LEAF(a_tree,int,tubeId)
  FIND_LEAF(a_tree,int,totalPE)
  
  FIND_LEAF_OBJECT(a_tree,pe)
  inlib::rroot::tree pe_tree(a_tree.file(),a_tree.fac());  
  leaf_pe->set_object(&pe_tree);

  inlib::uint64 nentries = a_tree.entries();
  for(inlib::uint32 index=0;index<nentries;index++) {
    READ_LEAF(a_tree,index,int,tubeId)
    READ_LEAF(a_tree,index,int,totalPE)
    if(!inlib::rroot::read_leaf_object(a_tree.file(),*br_pe,*leaf_pe,index)) return false;
    if(!process_hits_times(pe_tree,aHisto)) return false;
  }
  
  return true;
}

template <class H2D>
inline bool process_digits(inlib::rroot::tree& a_tree,H2D& aHisto) {
  FIND_LEAF(a_tree,double,pe)
  FIND_LEAF(a_tree,double,time)

  inlib::uint64 nentries = a_tree.entries();
  for(inlib::uint32 index=0;index<nentries;index++) {
    READ_LEAF(a_tree,index,double,pe)
    READ_LEAF(a_tree,index,double,time)
    aHisto.Fill(time,pe);
  }
  
  return true;
}

inline bool get_XYZ(inlib::rroot::tree& a_tree,
                    const std::string& a_sx,const std::string& a_sy,const std::string& a_sz,
                    double& a_x,double& a_y,double& a_z) {
  FIND_LEAF_NAME(a_tree,double,x,a_sx)
  FIND_LEAF_NAME(a_tree,double,y,a_sy)
  FIND_LEAF_NAME(a_tree,double,z,a_sz)
  inlib::uint64 nentries = a_tree.entries();
  if(nentries!=1) {
    a_tree.out() << "getXYZ : tree has not only one entry." << std::endl;
    a_x = 0;
    a_y = 0;
    a_z = 0;
    return false;
  }
  READ_LEAF(a_tree,0,double,x)
  READ_LEAF(a_tree,0,double,y)
  READ_LEAF(a_tree,0,double,z)
  a_x = x;
  a_y = y;
  a_z = z;
  return true;
}

inline bool process_tracks(inlib::rroot::tree& a_tree) {
  //if(nPart!=tracks->rows()) {
  //  std::cout << "read: nPart / tracks mismatch " 
  //              << nPart << " " << tracks->rows() << std::endl;
  //  return false;
  //}

  FIND_LEAF(a_tree,int,pId)
  FIND_LEAF(a_tree,int,parent)
  FIND_LEAF(a_tree,float,timeStart)
  FIND_LEAF(a_tree,double,mass)
  FIND_LEAF(a_tree,double,pTot)
  FIND_LEAF(a_tree,double,ETot)
  FIND_LEAF(a_tree,int,startVol)
  FIND_LEAF(a_tree,int,stopVol)

  FIND_LEAF_OBJECT(a_tree,direction)
  inlib::rroot::tree direction_tree(a_tree.file(),a_tree.fac());
  leaf_direction->set_object(&direction_tree);
  
  FIND_LEAF_OBJECT(a_tree,momentum)
  inlib::rroot::tree momentum_tree(a_tree.file(),a_tree.fac());
  leaf_momentum->set_object(&momentum_tree);
  
  FIND_LEAF_OBJECT(a_tree,startPos)
  inlib::rroot::tree startPos_tree(a_tree.file(),a_tree.fac());
  leaf_startPos->set_object(&startPos_tree);
  
  FIND_LEAF_OBJECT(a_tree,stopPos)
  inlib::rroot::tree stopPos_tree(a_tree.file(),a_tree.fac());
  leaf_stopPos->set_object(&stopPos_tree);
  
  inlib::uint64 nentries = a_tree.entries();
  for(inlib::uint32 index=0;index<nentries;index++) {
    READ_LEAF(a_tree,index,int,pId)
    READ_LEAF(a_tree,index,int,parent)
    READ_LEAF(a_tree,index,float,timeStart)
    READ_LEAF(a_tree,index,double,mass)
    READ_LEAF(a_tree,index,double,pTot)
    READ_LEAF(a_tree,index,double,ETot)
    READ_LEAF(a_tree,index,int,startVol)
    READ_LEAF(a_tree,index,int,stopVol)

    if(!inlib::rroot::read_leaf_object(a_tree.file(),*br_direction,*leaf_direction,index)) return false;
    if(!inlib::rroot::read_leaf_object(a_tree.file(),*br_momentum,*leaf_momentum,index)) return false;
    if(!inlib::rroot::read_leaf_object(a_tree.file(),*br_startPos,*leaf_startPos,index)) return false;
    if(!inlib::rroot::read_leaf_object(a_tree.file(),*br_stopPos,*leaf_stopPos,index)) return false;
    
    double dx,dy,dz;
    if(!get_XYZ(direction_tree,"dx","dy","dz",dx,dy,dz)) return false;

    double px,py,pz;
    if(!get_XYZ(momentum_tree,"px","py","pz",px,py,pz)) return false;

    double start_x,start_y,start_z;
    if(!get_XYZ(startPos_tree,"x","y","z",start_x,start_y,start_z)) return false;

    double stop_x,stop_y,stop_z;
    if(!get_XYZ(stopPos_tree,"x","y","z",stop_x,stop_y,stop_z)) return false;

    a_tree.out() << "----> Tk{"<<index<<"}: " 
              << " pId " << pId
              << " parent " << parent
              << " creation time " << timeStart 
              << " Volumes " << startVol << " " << stopVol << "\n"
              << " Start Pos (" << start_x 
              << "," << start_y << "," << start_z << ")\n"
              << " Stop Pos (" << stop_x 
              << "," << stop_y << "," << stop_z << ")\n"
              << " dx,dy,dz " << dx << " " << dy << " " << dz << "\n"
              << " m " << mass
              << " ETot " << ETot
              << " pTot " << pTot
              << " px,py,pz " << px << " " << py << " " << pz << "\n"
              << std::endl;
  }
  
  return true;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#include <inlib/rroot/file>
#include <inlib/rroot/fac>
#include <inlib/file>

#include <exlib/zlib>

template <class H1D,class H2D>
inline bool read_data(std::ostream& a_out,const std::string& a_file,H1D& aHisto1D,H2D& aHisto2D) {

 {bool is;
  inlib::file::is_root(a_file,is);
  if(!is) {
    a_out << "file is not a root file." << std::endl;
    return false;
  }}

  /////////////////////////////////////////////
  //// open the data file : ///////////////////
  /////////////////////////////////////////////
  bool verbose = false;
  //verbose = true;
  inlib::rroot::file rfile(a_out,a_file,verbose);
  rfile.add_unziper('Z',exlib::decompress_buffer);

  std::string stree("Event");
  inlib::rroot::fac fac(a_out);
  inlib::rroot::tree* tree = inlib::rroot::find_tree(rfile,fac,stree);      
  if(!tree) {
    a_out << "tree " << stree << " not found." << std::endl;
    return false;
  }

  inlib::uint64 nentries = tree->entries();
  if(!nentries) {
    a_out << "tree " << stree << " empty." << std::endl;
    return true;
  }

  a_out << "traitements de " << nentries << " entrees" << std::endl;

  std::vector<inlib::rroot::base_leaf*> leaves;
  tree->find_leaves(leaves);

 {inlib_vforcit(inlib::rroot::base_leaf*,leaves,it) {
    a_out << "leaf : " << (*it)->name() << " " << (*it)->title()  << " " << (*it)->s_cls() << std::endl;
  }}

  FIND_LEAF(*tree,int,eventId)
  FIND_LEAF(*tree,int,nPart)
  FIND_LEAF(*tree,int,nHits)
  FIND_LEAF(*tree,int,nDigits)
  FIND_LEAF(*tree,double,sumPE)

  FIND_LEAF_OBJECT(*tree,hit)
  inlib::rroot::tree hit_tree(rfile,fac);
  leaf_hit->set_object(&hit_tree);
  
  FIND_LEAF_OBJECT(*tree,digit)
  inlib::rroot::tree digit_tree(rfile,fac);
  leaf_digit->set_object(&digit_tree);
  
  FIND_LEAF_OBJECT(*tree,track)
  inlib::rroot::tree track_tree(rfile,fac);
  leaf_track->set_object(&track_tree);
  
  bool dump = false;
  dump = true;
  
  for(inlib::uint32 ievent=0;ievent<nentries;ievent++){
    READ_LEAF(*tree,ievent,int,eventId)
    READ_LEAF(*tree,ievent,int,nPart)
    READ_LEAF(*tree,ievent,int,nHits)
    READ_LEAF(*tree,ievent,int,nDigits)
    READ_LEAF(*tree,ievent,double,sumPE)

    if(!inlib::rroot::read_leaf_object(rfile,*br_hit,*leaf_hit,ievent)) return false;
    if(!inlib::rroot::read_leaf_object(rfile,*br_digit,*leaf_digit,ievent)) return false;
    if(!inlib::rroot::read_leaf_object(rfile,*br_track,*leaf_track,ievent)) return false;
  
    if(dump)
    a_out << ">>>>>>>>>>>>> Event{" << ievent << "}: "
    	      << " evt Id " << eventId 
    	      <<" #tracks: " << nPart
    	      <<" #hits: " << nHits
              <<" #digits: " << nDigits
              <<" sumPE " << sumPE
    	      << std::endl;
	      
    if(!process_hits(hit_tree,aHisto1D)) break;
    if(!process_digits(digit_tree,aHisto2D)) break;    
    if(!process_tracks(track_tree)) break;
  }

#undef READ_LEAF
#undef FIND_LEAF

  delete tree;

  return true;
}
