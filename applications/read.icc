
/*
#include <AIDA/IAnalysisFactory.h>
#include <AIDA/ITreeFactory.h>
#include <AIDA/ITree.h>
#include <AIDA/IManagedObject.h>
#include <AIDA/ITuple.h>
#include <AIDA/ITupleEntry.h>

#include <iostream>

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

inline AIDA::ITuple* cast_Tuple(AIDA::ITupleEntry* aEntry) {
  //return (AIDA::ITuple*)aEntry->cast("AIDA::ITuple");
  return dynamic_cast<AIDA::ITuple*>(aEntry);
}

inline bool get_XYZ(AIDA::ITupleEntry* a_entry,double& aX,double& aY,double& aZ) {
  if(!a_entry) return false;
  AIDA::ITuple* tuple = cast_Tuple(a_entry);
  if(!tuple) return false;

  tuple->start();
  if(!tuple->next()) return false;

  aX = tuple->getDouble(0);
  aY = tuple->getDouble(1);
  aZ = tuple->getDouble(2);

  return true;
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
inline bool dump_tracks(AIDA::ITupleEntry* a_entry) {
  if(!a_entry) return false;
  AIDA::ITuple* tuple = cast_Tuple(a_entry);
  if(!tuple) return false;

  //if(nPart!=tracks->rows()) {
  //  std::cout << "read: nPart / tracks mismatch " 
  //              << nPart << " " << tracks->rows() << std::endl;
  //  return false;
  //}

  tuple->start();
  int irow = 0;
  while(tuple->next()) {

    int pId = tuple->getInt(0);
    int parent = tuple->getInt(1);
    float timeStart = tuple->getFloat(2);

    double dx,dy,dz;
    if(!get_XYZ((AIDA::ITupleEntry*)tuple->getObject(3),dx,dy,dz)) return false;

    double mass = tuple->getDouble(4);
    double pTot = tuple->getDouble(5);
    double ETot = tuple->getDouble(6);

    double px,py,pz;
    if(!get_XYZ((AIDA::ITupleEntry*)tuple->getObject(7),px,py,pz)) return false;

    double start_x,start_y,start_z;
    if(!get_XYZ((AIDA::ITupleEntry*)tuple->getObject(8),start_x,start_y,start_z)) return false;

    double stop_x,stop_y,stop_z;
    if(!get_XYZ((AIDA::ITupleEntry*)tuple->getObject(9),stop_x,stop_y,stop_z)) return false;

    int startVol = tuple->getInt(10);
    int stopVol = tuple->getInt(11);

    std::cout << "----> Tk{"<<irow<<"}: " 
              << " pId " << pId
              << " parent " << parent
              << " creation time " << timeStart 
              << " Volumes " << startVol << " " << stopVol << "\n"
              << " Start Pos (" << start_x 
              << "," << start_y << "," << start_z << ")\n"
              << " Stop Pos (" << stop_x 
              << "," << stop_y << "," << stop_z << ")\n"
              << " dx,dy,dz " << dx << " " << dy << " " << dz << "\n"
              << " m " << mass
              << " ETot " << ETot
              << " pTot " << pTot
              << " px,py,pz " << px << " " << py << " " << pz << "\n"
              << std::endl;

    irow++;
  }
  return true;
}
*/

#include <inlib/rroot/tree_manip>

#define FIND_LEAF(a__tree,a__type,a__name) \
  inlib::rroot::branch* br_##a__name;\
  inlib::rroot::leaf<a__type>* leaf_##a__name;\
  if(!inlib::rroot::find_leaf(a__tree,#a__name,br_##a__name,leaf_##a__name)) return false;

#define READ_LEAF(a__tree,a__index,a__type,a__name) \
  a__type a__name;\
  if(!inlib::rroot::read_leaf((a__tree).file(),*br_##a__name,*leaf_##a__name,a__index,a__name)) return false;


template <class H1D>
inline bool process_hits_times(inlib::rroot::tree& a_tree,H1D& aHisto) {
  FIND_LEAF(a_tree,float,time)
  inlib::uint64 nentries = a_tree.entries();
  for(inlib::uint32 index=0;index<nentries;index++) {
    READ_LEAF(a_tree,index,float,time)
    aHisto.Fill(time);
  }
  return true;
}

template <class H1D>
inline bool process_hits(inlib::rroot::tree& a_tree,H1D& aHisto) {

  FIND_LEAF(a_tree,int,tubeId)
  FIND_LEAF(a_tree,int,totalPE)

  inlib::rroot::branch* br_pe_tree;
  inlib::rroot::leaf_object* leaf_pe_tree;
  if(!inlib::rroot::find_leaf(a_tree,"pe",br_pe_tree,leaf_pe_tree)) return false;
  
  inlib::rroot::tree pe_tree(a_tree.file(),a_tree.fac());  
  leaf_pe_tree->set_object(&pe_tree);

  inlib::uint64 nentries = a_tree.entries();
  for(inlib::uint32 index=0;index<nentries;index++) {
    READ_LEAF(a_tree,index,int,tubeId)
    READ_LEAF(a_tree,index,int,totalPE)
    if(!inlib::rroot::read_leaf_object(a_tree.file(),*br_pe_tree,*leaf_pe_tree,index)) return false;
    if(!process_hits_times(pe_tree,aHisto)) return false;
  }
  return true;
}

/*
template <class H2D>
inline bool process_digits(AIDA::ITupleEntry* a_entry,H2D& aHisto) {
  if(!a_entry) return false;
  AIDA::ITuple* tuple = cast_Tuple(a_entry);
  if(!tuple) return false;

  tuple->start();
  while(tuple->next()) {

    //int tubeId = tuple->getInt(0);
    double pe = tuple->getDouble(1);
    double time = tuple->getDouble(2);
    //printf("debug : ++++ : %g %g\n",time,pe);

    aHisto.Fill(time,pe);
  }
  return true;
}
*/
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#include <inlib/rroot/file>
#include <inlib/rroot/fac>
#include <inlib/file>

#include <exlib/zlib>

template <class H1D,class H2D>
inline bool read_data(std::ostream& a_out,const std::string& a_file,H1D& aHisto1D,H2D& aHisto2D) {

 {bool is;
  inlib::file::is_root(a_file,is);
  if(!is) {
    a_out << "file is not a root file." << std::endl;
    return false;
  }}

  /////////////////////////////////////////////
  //// open the data file : ///////////////////
  /////////////////////////////////////////////
  bool verbose = false;
  //verbose = true;
  inlib::rroot::file rfile(a_out,a_file,verbose);
  rfile.add_unziper('Z',exlib::decompress_buffer);

  std::string stree("Event");
  inlib::rroot::fac fac(a_out);
  inlib::rroot::tree* tree = inlib::rroot::find_tree(rfile,fac,stree);      
  if(!tree) {
    a_out << "tree " << stree << " not found." << std::endl;
    return false;
  }

  inlib::uint64 nentries = tree->entries();
  if(!nentries) {
    a_out << "tree " << stree << " empty." << std::endl;
    return true;
  }

  a_out << "traitements de " << nentries << " entrees" << std::endl;

  std::vector<inlib::rroot::base_leaf*> leaves;
  tree->find_leaves(leaves);

 {inlib_vforcit(inlib::rroot::base_leaf*,leaves,it) {
    a_out << "leaf : " << (*it)->name() << " " << (*it)->title()  << " " << (*it)->s_cls() << std::endl;
  }}

  FIND_LEAF(*tree,int,eventId)
  FIND_LEAF(*tree,int,nPart)
  FIND_LEAF(*tree,int,nHits)
  FIND_LEAF(*tree,int,nDigits)
  FIND_LEAF(*tree,double,sumPE)

  inlib::rroot::branch* br_hit_tree;
  inlib::rroot::leaf_object* leaf_hit_tree;
  if(!inlib::rroot::find_leaf(*tree,"hit",br_hit_tree,leaf_hit_tree)) return false;
  
  bool dump = false;
  dump = true;
  
  inlib::rroot::tree hit_tree(rfile,fac);
  leaf_hit_tree->set_object(&hit_tree);
  
  for(inlib::uint32 ievent=0;ievent<nentries;ievent++){
    READ_LEAF(*tree,ievent,int,eventId)
    READ_LEAF(*tree,ievent,int,nPart)
    READ_LEAF(*tree,ievent,int,nHits)
    READ_LEAF(*tree,ievent,int,nDigits)
    READ_LEAF(*tree,ievent,double,sumPE)

    if(!inlib::rroot::read_leaf_object(rfile,*br_hit_tree,*leaf_hit_tree,ievent)) return false;
  
    if(dump)
    a_out << ">>>>>>>>>>>>> Event{" << ievent << "}: "
    	      << " evt Id " << eventId 
    	      <<" #tracks: " << nPart
    	      <<" #hits: " << nHits
              <<" #digits: " << nDigits
              <<" sumPE " << sumPE
    	      << std::endl;
	      
    if(!process_hits(hit_tree,aHisto1D)) break;
    
    //if(!dump_tracks((AIDA::ITupleEntry*)tuple->getObject(8))) break;
    //if(!process_digits((AIDA::ITupleEntry*)tuple->getObject(13),aHisto2D)) break;
  }

#undef READ_LEAF
#undef FIND_LEAF

  delete tree;

  return true;
}
